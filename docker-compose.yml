# version: '3.8'

services:
  app:
    build: users_api
    container_name: users_api
    restart: always
    ports:
      - '8080:8000'
    volumes:
      - ./users_api/bin:/var/www/html/users_api/bin
      - ./users_api/config:/var/www/html/users_api/config
      - ./users_api/migrations:/var/www/html/users_api/migrations
      - ./users_api/public:/var/www/html/users_api/public
      - ./users_api/src:/var/www/html/users_api/src
      - ./users_api/tests:/var/www/html/users_api/tests
      - ./users_api/var:/var/www/html/users_api/var
      - ./users_api/composer.json:/var/www/html/users_api/composer.json
      - ./users_api/composer.lock:/var/www/html/users_api/composer.lock
      - ./users_api/symfony.lock:/var/www/html/users_api/symfony.lock
    environment:
      DATABASE_URL: "mysql://${DB_USER}:${DB_PASSWORD}@db:3306/${DB}?serverVersion=8.0"
      RABBITMQ_URL: "amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672/"
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - users_api_network

  db:
    image: mysql:8.0
    container_name: users_api_mysql
    restart: always
    environment:
      MYSQL_DATABASE: ${DB}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
    ports:
      - '3306:3306'
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      retries: 5
      start_period: 30s # to ensure enough time if db is initializing
      timeout: 5s
    env_file:
      - .env
    volumes:
      - db_data:/var/lib/mysql # To save db data locally
    networks:
      - users_api_network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: users_api_rabbitmq
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    ports:
      - '5672:5672'  # AMQP protocol port
      - '15672:15672' # RabbitMQ Management UI
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      retries: 5
      start_period: 30s # to ensure RabbitMQ has time to start
      timeout: 5s
    networks:
      - users_api_network

  worker:
    build: users_api
    container_name: users_api_worker
    restart: always
    command: [ "php", "bin/console", "messenger:consume", "async", "--memory-limit=256M", "--limit=100" ]
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_URL: "amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672/"
    env_file:
      - .env
    networks:
      - users_api_network

networks:
  users_api_network:
    driver: bridge

volumes:
  db_data:
