security:
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        # Dev exceptions
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        # Login endpoint for retrieving JWT token
        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        # API firewall for JWT-protected endpoints
        api:
            pattern: ^/api/
            stateless: true
            provider: app_user_provider
            jwt: ~  # LexikJWTAuthenticationBundle handles JWT

        # Main firewall (for potential future use)
        main:
            lazy: true
            provider: app_user_provider
            logout: false

    role_hierarchy:
        ROLE_ADMIN: [ROLE_USER]

    access_control:

        # Login without authentication
        - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }

        # Me endpoint is accessible to ROLE_USER (and higher roles like ROLE_ADMIN)
        - { path: ^/api/users/me, roles: ROLE_USER }

        # All other users endpoints require ROLE_ADMIN
        - { path: ^/api/users, roles: ROLE_ADMIN }

        # All other API endpoints require any authenticated user
        - { path: ^/api/, roles: IS_AUTHENTICATED_FULLY }

when@test:
    security:
        password_hashers:
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4
                time_cost: 3
                memory_cost: 10
